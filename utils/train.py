import numpy as np
import tensorflow as tf
import random
from tensorflow import keras

def rgb_shift(train_ds):
    #random RGB shift
    for images, labels in train_ds:
        for i in images:
            channels=[]
            # red
            R = i[:,:,0]
            R *= round(random.uniform(0.5,1.5), 1)
            R *= 0
            channels.append(R)
            
            # green
            G = i[:,:,1]
            G *= round(random.uniform(0.5,1.5), 1)
            G *= 0
            channels.append(G)
                
            # blue
            B = i[:,:,2]
            B *= round(random.uniform(0.5,1.5), 1)
            B *= 0
            channels.append(B)

            i = tf.stack(channels)
            i = np.clip(i, 0, 255)
            
    return train_ds

def preprocess_train(train_ds):
    
    data_augmentation = tf.keras.Sequential(
        [
            tf.keras.layers.experimental.preprocessing.Normalization(),
            tf.keras.layers.experimental.preprocessing.RandomFlip("horizontal"),
            
        ]
    )
    
    augmented_train_ds = train_ds.map(
        lambda x, y: (data_augmentation(x),y))
    
    return augmented_train_ds

#https://jkjung-avt.github.io/keras-image-cropping/
def random_crop(img, random_crop_size):
    # Note: image_data_format is 'channel_last'
    assert img.shape[2] == 3
    height, width = img.shape[0], img.shape[1]
    dy, dx = random_crop_size
    x = np.random.randint(0, width - dx + 1)
    y = np.random.randint(0, height - dy + 1)
    return img[y:(y+dy), x:(x+dx), :]


def crop_generator(batches, crop_length):
    """
    Take as input a Keras ImageGen (Iterator) and generate random
    crops from the image batches generated by the original iterator.
    """
    while True:
        batch_x, batch_y = next(batches)
        batch_crops = np.zeros((batch_x.shape[0], crop_length, crop_length, 3))
        for i in range(batch_x.shape[0]):
            batch_crops[i] = random_crop(batch_x[i], (crop_length, crop_length))
        yield (batch_crops, batch_y)
    
